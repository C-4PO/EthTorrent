{"version":3,"sources":["../src/walletMethods.js"],"names":["_getAccounts","client_id","opts","scope","length","forEach","s","toString","replace","resolve","reject","url","APP_URL","VERSION","params","version","response_type","widget","then","error","result","SqlkError","promises","push","API_ENDPOINT","success","wallets","data","message","accounts","find","w","default","filter","map","address","catch","err","user","securitySettings","has2fa","has_2fa","hasRecovery","has_recovery","emailVerified","email_verified","name","given_name","family_name","email","all","results","r","_signMsg","method","account","paramsV3","msg","_signTx","value","to","from","gas","gasPrice","nonce","network","description","state","parseInt","rpc_url","chainId","chain_id"],"mappings":"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","file":"walletMethods.js","sourcesContent":["/* eslint-disable */\nimport { _popup, _serialize, _fetch } from './util'\nimport { SqlkError } from './error'\nimport { APP_URL, API_ENDPOINT, VERSION } from './config'\n\n/**\n * Get a list of the users Ethereum accounts\n * @param {string} clientId\n * @param {object} opts\n */\nexport const _getAccounts = function (client_id, opts = {}) {\n  let scope = {'wallets:read': 1}\n  if (opts.scope && opts.scope.length) {\n    opts.scope.forEach(s => scope[s] = 1)\n  }\n  scope = Object.keys(scope).toString().replace(/ /g, '')\n  return new Promise(async (resolve, reject) => {\n    let url = `${APP_URL}/authorize?version=${VERSION}`\n    let params = {\n      version: VERSION,\n      client_id,\n      scope: `[${scope}]`,\n      response_type: 'token',\n      widget: true\n    }\n    _popup({ url, params }).then(({ error, result }) => {\n      if (error) reject(new SqlkError(error))\n      else {\n        let promises = []\n        promises.push(_fetch(`${API_ENDPOINT}/wallets?access_token=${result}`).then(async ({ success, wallets }) => {\n          if (!success) reject(new SqlkError(data.message || 'Issue fetching accounts, try again later'))\n          else {\n            return Promise.resolve({\n              accounts: ([\n                wallets.find(w => w.default),\n                ...wallets.filter(w => !w.default)\n              ]).map(w => w.address)\n            })\n          }\n        }).catch(err => reject(err)))\n        if (scope !== 'wallets:read') {\n          promises.push(_fetch(`${API_ENDPOINT}/user?access_token=${result}`).then(async ({ success, ...user }) => {\n            if (!success) reject(new SqlkError(data.message || 'Issue fetching user info, try again later'))\n            else {\n              return Promise.resolve({\n                securitySettings: {\n                  has2fa: user.has_2fa,\n                  hasRecovery: user.has_recovery,\n                  emailVerified: user.email_verified\n                },\n                name: `${user.given_name} ${user.family_name}`,\n                email: user.email\n              })\n            }\n          }).catch(err => reject(err)))\n        }\n        Promise.all(promises).then(results => {\n          let result = {}\n          results.forEach(r => {\n            result = { ...result, ...r }\n          })\n          resolve(result)\n        })\n\n      }\n    })\n  })\n}\n\n/**\n * Request a signed message from a user\n * @param {string} client_id\n * @param {string} message\n * @param {string} method\n * @param {string} account\n */\nexport const _signMsg = async function ({ client_id, message, method, account }) {\n  let url = `${APP_URL}/msg?version=${VERSION}`\n  let params = {\n    client_id,\n    method,\n    version: VERSION,\n    account,\n  }\n  if (method === 'eth_signTypedData') {\n    params.params = message\n  } else if (method === 'eth_signTypedData_v3') {\n    params.paramsV3 = message\n  } else {\n    params.msg = message\n  }\n  return _popup({ url, params }).then(({ error, result }) => {\n    if (error) throw new SqlkError(error)\n    return Promise.resolve(result)\n  })\n}\n\n/**\n * Request a signed transaction from a user\n * @param {string} method\n * @param {string} client_id\n * @param {string} value\n * @param {string} to\n * @param {string} from\n * @param {string} gas\n * @param {string} gasPrice\n * @param {string} nonce\n * @param {string} network\n * @param {string} description\n * @param {string} state\n * @param {string} data\n */\nexport const _signTx = async function ({\n  method,\n  client_id,\n  value,\n  to,\n  from,\n  gas,\n  gasPrice,\n  nonce,\n  network,\n  description,\n  state,\n  data,\n}) {\n  if (!to) throw new SqlkError('You must provide a recipient `to` for the request')\n  let url = `${APP_URL}/tx?widget=true&version=${VERSION}`\n  let params = {\n    method,\n    client_id,\n    version: VERSION,\n    widget: true,\n    to,\n    from,\n    data,\n    state,\n    description,\n  }\n  if (value) params.value = parseInt(value, 16)\n  if (gas) params.gas = parseInt(gas, 16)\n  if (gasPrice) params.gasPrice = parseInt(gasPrice, 16)\n  if (nonce) params.nonce = parseInt(nonce, 16)\n  // set network\n  if (typeof network === 'object') {\n    params.network = 'custom'\n    params.rpc_url = network.url\n    if (network.chainId) params.chain_id = network.chainId\n  } else {\n    params.network = network\n  }\n  return _popup({ url, params }).then(({ error, result }) => {\n    if (error) throw new SqlkError(error)\n    return Promise.resolve(result)\n  })\n}\n"]}