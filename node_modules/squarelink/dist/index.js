import _regeneratorRuntime from 'babel-runtime/regenerator';
import ProviderEngine from 'squarelink-provider-engine';
import CacheSubprovider from 'squarelink-provider-engine/subproviders/cache';
import FixtureSubprovider from 'squarelink-provider-engine/subproviders/fixture';
import FilterSubprovider from 'squarelink-provider-engine/subproviders/filters';
import HookedWalletSubprovider from 'squarelink-provider-engine/subproviders/hooked-wallet';
import NonceSubprovider from 'squarelink-provider-engine/subproviders/nonce-tracker';
import RpcSubprovider from 'squarelink-provider-engine/subproviders/rpc';
import SubscriptionSubprovider from 'squarelink-provider-engine/subproviders/subscriptions';
import WebSocketSubprovider from 'squarelink-provider-engine/subproviders/websocket';

var VERSION = "1.0.7";
var API_ENDPOINT = "https://api.squarelink.com";
var APP_URL = "https://app.squarelink.com";
var IFRAME_URL = "https://squarelink.com/popup";
var NETWORK_LIST = "https://api.squarelink.com/networks";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var jsx = function () {
  var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7;
  return function createRawReactElement(type, props, key, children) {
    var defaultProps = type && type.defaultProps;
    var childrenLength = arguments.length - 3;

    if (!props && childrenLength !== 0) {
      props = {};
    }

    if (props && defaultProps) {
      for (var propName in defaultProps) {
        if (props[propName] === void 0) {
          props[propName] = defaultProps[propName];
        }
      }
    } else if (!props) {
      props = defaultProps || {};
    }

    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);

      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 3];
      }

      props.children = childArray;
    }

    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key === undefined ? null : '' + key,
      ref: null,
      props: props,
      _owner: null
    };
  };
}();

var asyncIterator = function (iterable) {
  if (typeof Symbol === "function") {
    if (Symbol.asyncIterator) {
      var method = iterable[Symbol.asyncIterator];
      if (method != null) return method.call(iterable);
    }

    if (Symbol.iterator) {
      return iterable[Symbol.iterator]();
    }
  }

  throw new TypeError("Object is not async iterable");
};

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();

var asyncGeneratorDelegate = function (inner, awaitWrap) {
  var iter = {},
      waiting = false;

  function pump(key, value) {
    waiting = true;
    value = new Promise(function (resolve) {
      resolve(inner[key](value));
    });
    return {
      done: false,
      value: awaitWrap(value)
    };
  }

  if (typeof Symbol === "function" && Symbol.iterator) {
    iter[Symbol.iterator] = function () {
      return this;
    };
  }

  iter.next = function (value) {
    if (waiting) {
      waiting = false;
      return value;
    }

    return pump("next", value);
  };

  if (typeof inner.throw === "function") {
    iter.throw = function (value) {
      if (waiting) {
        waiting = false;
        throw value;
      }

      return pump("throw", value);
    };
  }

  if (typeof inner.return === "function") {
    iter.return = function (value) {
      return pump("return", value);
    };
  }

  return iter;
};

var asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineEnumerableProperties = function (obj, descs) {
  for (var key in descs) {
    var desc = descs[key];
    desc.configurable = desc.enumerable = true;
    if ("value" in desc) desc.writable = true;
    Object.defineProperty(obj, key, desc);
  }

  return obj;
};

var defaults = function (obj, defaults) {
  var keys = Object.getOwnPropertyNames(defaults);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = Object.getOwnPropertyDescriptor(defaults, key);

    if (value && value.configurable && obj[key] === undefined) {
      Object.defineProperty(obj, key, value);
    }
  }

  return obj;
};

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var _instanceof = function (left, right) {
  if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
    return right[Symbol.hasInstance](left);
  } else {
    return left instanceof right;
  }
};

var interopRequireDefault = function (obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
};

var interopRequireWildcard = function (obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj.default = obj;
    return newObj;
  }
};

var newArrowCheck = function (innerThis, boundThis) {
  if (innerThis !== boundThis) {
    throw new TypeError("Cannot instantiate an arrow function");
  }
};

var objectDestructuringEmpty = function (obj) {
  if (obj == null) throw new TypeError("Cannot destructure undefined");
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var selfGlobal = typeof global === "undefined" ? self : global;

var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var slicedToArrayLoose = function (arr, i) {
  if (Array.isArray(arr)) {
    return arr;
  } else if (Symbol.iterator in Object(arr)) {
    var _arr = [];

    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
      _arr.push(_step.value);

      if (i && _arr.length === i) break;
    }

    return _arr;
  } else {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }
};

var taggedTemplateLiteral = function (strings, raw) {
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
};

var taggedTemplateLiteralLoose = function (strings, raw) {
  strings.raw = raw;
  return strings;
};

var temporalRef = function (val, name, undef) {
  if (val === undef) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  } else {
    return val;
  }
};

var temporalUndefined = {};

var toArray = function (arr) {
  return Array.isArray(arr) ? arr : Array.from(arr);
};

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var babelHelpers = /*#__PURE__*/Object.freeze({
  jsx: jsx,
  asyncIterator: asyncIterator,
  asyncGenerator: asyncGenerator,
  asyncGeneratorDelegate: asyncGeneratorDelegate,
  asyncToGenerator: asyncToGenerator,
  classCallCheck: classCallCheck,
  createClass: createClass,
  defineEnumerableProperties: defineEnumerableProperties,
  defaults: defaults,
  defineProperty: defineProperty,
  get: get,
  inherits: inherits,
  interopRequireDefault: interopRequireDefault,
  interopRequireWildcard: interopRequireWildcard,
  newArrowCheck: newArrowCheck,
  objectDestructuringEmpty: objectDestructuringEmpty,
  objectWithoutProperties: objectWithoutProperties,
  possibleConstructorReturn: possibleConstructorReturn,
  selfGlobal: selfGlobal,
  set: set,
  slicedToArray: slicedToArray,
  slicedToArrayLoose: slicedToArrayLoose,
  taggedTemplateLiteral: taggedTemplateLiteral,
  taggedTemplateLiteralLoose: taggedTemplateLiteralLoose,
  temporalRef: temporalRef,
  temporalUndefined: temporalUndefined,
  toArray: toArray,
  toConsumableArray: toConsumableArray,
  'typeof': _typeof,
  'extends': _extends,
  'instanceof': _instanceof
});

var SqlkError = function (_Error) {
  inherits(SqlkError, _Error);

  function SqlkError(msg) {
    classCallCheck(this, SqlkError);

    var _this = possibleConstructorReturn(this, (SqlkError.__proto__ || Object.getPrototypeOf(SqlkError)).call(this, msg));

    _this.name = '[Squarelink Error]';
    return _this;
  }

  return SqlkError;
}(Error);

var Iframe = function () {
  function Iframe(url, params) {
    classCallCheck(this, Iframe);

    this.url = url;
    this.params = params;
    this.open = true;
    this._createIframe();
    this._addCloseListeners();
    this._addMessageListeners();
  }

  createClass(Iframe, [{
    key: 'close',
    value: function close() {
      if (!this.open) return;
      this.container.parentNode.removeChild(this.container);
      if (this.onClosed) this.onClosed(this.error);
      this.open = false;
    }
  }, {
    key: '_addCloseListeners',
    value: function _addCloseListeners() {
      var _this = this;

      this.container.addEventListener('click', function () {
        _this.close();
      });
      var self = this;
      document.onkeydown = function (evt) {
        evt = evt || window.event;
        if (evt.keyCode == 27 && self.open) {
          self.close();
        }
      };
    }
  }, {
    key: '_addMessageListeners',
    value: function _addMessageListeners() {
      var _this2 = this;

      var self = this;
      var paramsSent = false;
      window.addEventListener('message', function (e) {
        var _e$data = e.data,
            origin = _e$data.origin,
            height = _e$data.height,
            type = _e$data.type,
            error = _e$data.error;

        if (origin === 'squarelink-iframe') {
          if (type === 'resize') {
            self.iframe.style = styles.iframe(height + 'px', 'none');
            return;
          } else if (type === 'error') {
            self.error = error;
            self.close();
          } else if (type === 'onload' && !paramsSent) {
            paramsSent = true;
            _this2.iframe.contentWindow.postMessage({
              origin: 'squarelink-web3-sdk',
              params: _this2.params
            }, '*');
          }
        }
      }, false);
    }
  }, {
    key: '_createIframe',
    value: function _createIframe() {
      var container = document.createElement('div');
      container.id = 'squarelink-iframe-container';
      container.style = styles.container;

      var preloader = '<div class="squarelink-preloader" id="squarelink-preloader"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>';
      container.innerHTML = preloader;

      var iframe = document.createElement('iframe');
      iframe.src = IFRAME_URL + '/?url=' + encodeURI(this.url);
      iframe.id = 'squarelink-iframe';
      iframe.style = styles.iframe();
      iframe.onload = function () {
        var pl = document.getElementById('squarelink-preloader');
        pl.parentNode.removeChild(pl);
      };
      container.appendChild(iframe);
      this.iframe = iframe;
      this.container = container;

      document.body.appendChild(container);
    }
  }]);
  return Iframe;
}();


var styles = {
  iframe: function iframe() {
    var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '200px';
    var border = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '3px solid #fff';

    return '\n      position: absolute;\n      height: ' + height + ';\n      width: 360px;\n      top: 50%;\n      left: 50%;\n      transform:\n      translate(-50%, -50%);\n      border: 0px transparent;\n      border-radius: 10px;\n      -webkit-border-radius: 10px;\n      -moz-border-radius: 10px;\n      border-radius: 10px;\n      -khtml-border-radius: 10px;\n      border: ' + border + ';\n      z-index: 2147483647;\n      box-shadow: 0 10px 30px 4px rgba(0,0,0,.33);\n      background: none;\n    ';
  },
  container: '\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 2147483647;\n    background: rgba(0,0,0,0.5);\n  '
};

var headerStyles = "\n.squarelink-close {\n  position: absolute;\n  right: 50px;\n  top: 30px;\n  width: 10px;\n  height: 25px;\n  opacity: 0.6;\n  z-index: 100;\n  cursor: pointer;\n  -webkit-transition-duration:0.5s;\n  transition-duration:0.5s;\n}\n.squarelink-close:hover {\n  opacity: 1;\n}\n.squarelink-close:before, .squarelink-close:after {\n  position: absolute;\n  left: 15px;\n  content: ' ';\n  height: 30px;\n  width: 3px;\n  background-color: #fff;\n}\n.squarelink-close:before {\n  transform: rotate(45deg);\n}\n.squarelink-close:after {\n  transform: rotate(-45deg);\n}\n\n.squarelink-preloader {\n  display: inline-block;\n  position: absolute;\n  width: 64px;\n  height: 64px;\n  z-index: 2147483649;\n  top: 50%;\n  left: 50%;\n  transform:\n  translate(-50%, -50%);\n}\n.squarelink-preloader div {\n  position: absolute;\n  width: 13px;\n  height: 13px;\n  border-radius: 50%;\n  background: #fff;\n  animation: squarelink-preloader 1.2s linear infinite;\n}\n.squarelink-preloader div:nth-child(1) {\n  top: 6px;\n  left: 6px;\n  animation-delay: 0s;\n}\n.squarelink-preloader div:nth-child(2) {\n  top: 6px;\n  left: 26px;\n  animation-delay: -0.4s;\n}\n.squarelink-preloader div:nth-child(3) {\n  top: 6px;\n  left: 45px;\n  animation-delay: -0.8s;\n}\n.squarelink-preloader div:nth-child(4) {\n  top: 26px;\n  left: 6px;\n  animation-delay: -0.4s;\n}\n.squarelink-preloader div:nth-child(5) {\n  top: 26px;\n  left: 26px;\n  animation-delay: -0.8s;\n}\n.squarelink-preloader div:nth-child(6) {\n  top: 26px;\n  left: 45px;\n  animation-delay: -1.2s;\n}\n.squarelink-preloader div:nth-child(7) {\n  top: 45px;\n  left: 6px;\n  animation-delay: -0.8s;\n}\n.squarelink-preloader div:nth-child(8) {\n  top: 45px;\n  left: 26px;\n  animation-delay: -1.2s;\n}\n.squarelink-preloader div:nth-child(9) {\n  top: 45px;\n  left: 45px;\n  animation-delay: -1.6s;\n}\n@keyframes squarelink-preloader {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}";

var POPUP_PARAMS = 'scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,width=375,height=350,left=-500,top=150';

var getPopup = function getPopup(_ref) {
  var url = _ref.url,
      params = _ref.params;

  var style = document.createElement('style');
  style.innerHTML = headerStyles;
  var head = document.head || document.getElementsByTagName('head')[0];
  head.appendChild(style);

  var popup = window.open('', '_blank', POPUP_PARAMS);
  if (!popup || popup.closed || typeof popup.closed == 'undefined') {
    try {
      popup.close();
    } catch (err) {}
    return Promise.resolve({ iframe: new Iframe(url, params) });
  }
  return _loadPopup({ url: url, popup: popup, params: params });
};

var _loadPopup = function _loadPopup(_ref2) {
  var url = _ref2.url,
      popup = _ref2.popup,
      params = _ref2.params;
  return new Promise(function (resolve, reject) {
    popup.location.href = url;
    var result = false;
    window.addEventListener('message', function (e) {
      if (result) return;
      var _e$data = e.data,
          origin = _e$data.origin,
          type = _e$data.type;

      if (origin === 'squarelink' && type === 'onload') {
        result = true;
        popup.postMessage({ origin: 'squarelink-web3-sdk', params: params }, '*');
        popup.focus();
        _addPageLoader(popup);
        resolve({ popup: popup });
        window.removeEventListener('message', function () {});
      }
    }, false);
  });
};

var _addPageLoader = function _addPageLoader(popup) {
  var container = document.createElement('div');
  container.id = 'squarelink-preloader-container';
  container.style = '\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 2147483647;\n    background: rgba(0,0,0,0.5);\n  ';

  var preloader = '<div class="squarelink-preloader" id="squarelink-preloader"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>';

  var closeButton = '<div class="squarelink-close" id="squarelink-close-button"></div>';

  container.innerHTML = closeButton + preloader;
  document.body.appendChild(container);

  document.getElementById('squarelink-close-button').addEventListener('click', function () {
    popup.close();
  });
};

var SCOPES = ['wallets:admin', 'wallets:edit', 'wallets:create', 'wallets:remove', 'wallets:read', 'user', 'user:name', 'user:email', 'user:security'];

var _fetch = function _fetch(url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.send();
    xhr.onload = function () {
      if (xhr.status != 200) {
        reject(new SqlkError('Issue connecting to Squarelink servers'));
      } else {
        resolve(JSON.parse(xhr.response));
      }
    };
    xhr.onerror = function () {
      reject(new SqlkError('Issue connecting to Squarelink servers'));
    };
  });
};

var _popup = function _popup(url) {
  var _this = this;

  return new Promise(function () {
    var _ref = asyncToGenerator(_regeneratorRuntime.mark(function _callee(resolve, reject) {
      var _ref2, popup, iframe, error, result, popupTick;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getPopup(url);

            case 2:
              _ref2 = _context.sent;
              popup = _ref2.popup;
              iframe = _ref2.iframe;
              error = _ref2.error;

              if (!error) {
                _context.next = 8;
                break;
              }

              return _context.abrupt('return', resolve({ error: 'Window closed' }));

            case 8:
              result = false;


              if (popup) {
                popupTick = setInterval(function () {
                  if (result) {
                    clearInterval(popupTick);
                  } else if (popup.closed) {
                    result = true;
                    window.removeEventListener('message', function () {});
                    clearInterval(popupTick);
                    resolve({ error: 'Window closed' });
                    var preloader = document.getElementById('squarelink-preloader-container');
                    preloader.parentNode.removeChild(preloader);
                  }
                }, 1);
              }

              if (iframe) {
                iframe.onClosed = function (error) {
                  if (!result) {
                    result = true;
                    window.removeEventListener('message', function () {});
                    resolve({ error: error || 'Window closed' });
                  }
                };
              }

              window.addEventListener('message', function (e) {
                var _e$data = e.data,
                    origin = _e$data.origin,
                    height = _e$data.height,
                    type = _e$data.type;

                if (type === 'onload') return;
                if (origin === 'squarelink' && !result) {
                  result = true;
                  window.removeEventListener('message', function () {});
                  if (popup) {
                    popup.close();
                    var preloader = document.getElementById('squarelink-preloader-container');
                    preloader.parentNode.removeChild(preloader);
                  } else {
                    iframe.close();
                  }
                  resolve(_extends({}, e.data, { origin: undefined, height: undefined }));
                }
              }, false);

            case 12:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
};

var _validateParams = function _validateParams(_ref3) {
  var client_id = _ref3.client_id,
      network = _ref3.network,
      scope = _ref3.scope;

  if (scope) {
    if (!Array.isArray(scope)) throw new SqlkError('\'scope\' must be an Array');
    for (var i in scope) {
      if (!SCOPES.includes(scope[i])) throw new SqlkError('We do not support the ' + scope[i] + ' scope');
    }
  }
  if ((typeof network === 'undefined' ? 'undefined' : _typeof(network)) === 'object') {
    if (!network.url) throw new SqlkError('Please provide an RPC endpoint for your custom network');else if (!network.url.match(/(wss|https){1}?:(\/?\/?)[^\s]+/)) throw new SqlkError('We do not currently support insecure (http://, ws://) RPC connections. Try updating squarelink to its latest version!');else if (network.chainId && (network.chainId !== parseInt(network.chainId) || network.chainId < 0 || network.chainId > 500000)) throw new SqlkError('Please provide a valid Chain ID');else if (network.skipCache !== undefined && typeof network.skipCache !== 'boolean') throw new SqlkError('the `skipCache` paramter must be a boolean');
  } else if (!this.NETWORKS[network]) {
    throw new SqlkError('Invalid network provided');
  } else if (!!this.NETWORKS[network].sdkVersion) {
    var sdkVersion = this.NETWORKS[network].sdkVersion;

    var sdkParts = VERSION.split('.');
    var netParts = sdkVersion.split('.');
    for (var _i = 0; _i < 3; _i++) {
      if (parseInt(sdkParts[_i]) > parseInt(netParts[_i])) return;
      if (parseInt(sdkParts[_i]) < parseInt(netParts[_i])) {
        throw new SqlkError('You need to update Squarelink to squarelink@' + sdkVersion + ' to use that network');
      }
    }
  }
};

var _validateSecureOrigin = function _validateSecureOrigin() {
  var isLocalhost = location.hostname === 'localhost' || location.hostname === '127.0.0.1';
  var isSecureOrigin = location.protocol === 'https:';
  var isChromeExt = location.protocol === 'chrome-extension:';
  var isSecure = isLocalhost || isSecureOrigin || isChromeExt;

  if (!isSecure) {
    throw new SqlkError('Access to the Squarelink Web3 Engine is restricted to secure origins.\nIf this is a development environment please use http://localhost:' + location.port + ' instead.\nOtherwise, please use an SSL certificate.');
  }
};

var _getRPCInfo = function _getRPCInfo(network) {
  var rpcUrl;
  var skipCache = true;
  if ((typeof network === 'undefined' ? 'undefined' : _typeof(network)) === 'object') {
    rpcUrl = network.url;
    skipCache = network.skipCache !== undefined ? network.skipCache : true;
  } else {
    var netInfo = this.NETWORKS[network];
    rpcUrl = netInfo.rpcUrl;
    skipCache = netInfo.skipCache !== undefined ? netInfo.skipCache : true;
  }
  var protocol = rpcUrl.split(':')[0].toLowerCase();
  switch (protocol) {
    case 'http':
    case 'https':
      return {
        rpcUrl: rpcUrl,
        skipCache: skipCache,
        connectionType: 'http'
      };
    case 'ws':
    case 'wss':
      return {
        rpcUrl: rpcUrl,
        skipCache: skipCache,
        connectionType: 'ws'
      };
    default:
      throw new SqlkError('Unrecognized protocol in "' + rpcUrl + '"');
  }
};

var _getNetVersion = function _getNetVersion(network) {
  if ((typeof network === 'undefined' ? 'undefined' : _typeof(network)) === 'object') return network.chainId || null;
  return this.NETWORKS[network].chainId;
};

var _loadNetworks = function _loadNetworks() {
  var _this = this;

  this.loadingNetworks = true;
  _fetch(NETWORK_LIST).then(function (data) {
    _this.NETWORKS = data;
    _this.loadingNetworks = false;
  }).catch(function (err) {
    throw new SqlkError('Issue connecting to Squarelink');
  });
};

var _waitForNetworks = function () {
  var _ref = asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
    var _this2 = this;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', new Promise(function (resolve, reject) {
              var interval = setInterval(function () {
                if (!_this2.loadingNetworks) {
                  clearInterval(interval);
                  resolve();
                }
              }, 1);
            }));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function _waitForNetworks() {
    return _ref.apply(this, arguments);
  };
}();

var _availableAsSync = JSON.parse('{"mainnet":{"name":"mainnet","label":"Ethereum","chainId":1,"rpcUrl":"https://mainnet.infura.io/v3/97d643e0cb664922a7009a6af33b42aa","skipCache":true,"color":"rgb(79, 227, 194)"},"xdai":{"name":"xdai","label":"xDai","chainId":100,"rpcUrl":"https://dai.poa.network","skipCache":false,"color":"rgb(233, 160, 34)"},"poa":{"name":"poa","label":"POA Network","chainId":99,"rpcUrl":"https://core.poa.network","skipCache":false,"color":"rgb(82, 49, 159)"},"sokol":{"name":"sokol","label":"Sokol","chainId":77,"rpcUrl":"https://sokol.poa.network","skipCache":false,"color":"rgb(110, 34, 233)"},"maticAlpha":{"name":"maticAlpha","label":"\u03B1-Matic Network","chainId":4626,"rpcUrl":"https://alpha.ethereum.matic.network","skipCache":false,"color":"rgb(34, 120, 233)"},"maticTestnet":{"name":"maticTestnet","label":"Matic Testnet","chainId":8995,"rpcUrl":"https://testnet2.matic.network","skipCache":false,"color":"rgb(34, 120, 233)"},"thundercore":{"name":"thundercore","label":"Thundercore","chainId":108,"rpcUrl":"https://mainnet-rpc.thundercore.com","skipCache":false,"color":"rgb(233, 207, 34)"},"thundertest":{"name":"thundertest","label":"Thundercore Testnet","chainId":18,"rpcUrl":"https://mainnet-rpc.thundercore.com","skipCache":false,"color":"rgb(233, 207, 34)"},"lightstreams":{"name":"lightstreams","label":"Lightstreams","chainId":163,"rpcUrl":"https://node.mainnet.lightstreams.io","skipCache":false,"color":"rgb(149, 0, 0)"},"lightstreamsSirius":{"name":"lightstreamsSirius","label":"Lightstreams Sirius","chainId":162,"rpcUrl":"https://node.sirius.lightstreams.io","skipCache":false,"color":"rgb(149, 0, 0)"},"rinkeby":{"name":"rinkeby","label":"Rinkeby","chainId":4,"rpcUrl":"https://rinkeby.infura.io/v3/97d643e0cb664922a7009a6af33b42aa","skipCache":true,"color":"rgb(227, 79, 159)"},"kovan":{"name":"kovan","label":"Kovan","chainId":42,"rpcUrl":"https://kovan.infura.io/v3/97d643e0cb664922a7009a6af33b42aa","skipCache":true,"color":"rgb(227, 199, 79)"},"ropsten":{"name":"ropsten","label":"Ropsten","chainId":3,"rpcUrl":"https://ropsten.infura.io/v3/97d643e0cb664922a7009a6af33b42aa","skipCache":true,"color":"rgb(79, 103, 227)"},"goerli":{"name":"goerli","label":"Goerli","chainId":5,"rpcUrl":"https://goerli.infura.io/v3/97d643e0cb664922a7009a6af33b42aa","skipCache":true,"color":"rgb(73, 72, 48)"},"lobstacoin":{"name":"lobstacoin","label":"Lobstacoin","chainId":69,"rpcUrl":"https://lobsta.squarelink.com","skipCache":false,"color":"rgb(28, 50, 115)"}}');

var _getAccounts = function _getAccounts(client_id) {
  var _this = this;

  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var scope = { 'wallets:read': 1 };
  if (opts.scope && opts.scope.length) {
    opts.scope.forEach(function (s) {
      return scope[s] = 1;
    });
  }
  scope = Object.keys(scope).toString().replace(/ /g, '');
  return new Promise(function () {
    var _ref = asyncToGenerator(_regeneratorRuntime.mark(function _callee3(resolve, reject) {
      var url, params;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              url = APP_URL + '/authorize?version=' + VERSION;
              params = {
                version: VERSION,
                client_id: client_id,
                scope: '[' + scope + ']',
                response_type: 'token',
                widget: true
              };

              _popup({ url: url, params: params }).then(function (_ref2) {
                var error = _ref2.error,
                    result = _ref2.result;

                if (error) reject(new SqlkError(error));else {
                  var promises = [];
                  promises.push(_fetch(API_ENDPOINT + '/wallets?access_token=' + result).then(function () {
                    var _ref4 = asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref3) {
                      var success = _ref3.success,
                          wallets = _ref3.wallets;
                      return _regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (success) {
                                _context.next = 4;
                                break;
                              }

                              reject(new SqlkError(data.message || 'Issue fetching accounts, try again later'));
                              _context.next = 5;
                              break;

                            case 4:
                              return _context.abrupt('return', Promise.resolve({
                                accounts: [wallets.find(function (w) {
                                  return w.default;
                                })].concat(toConsumableArray(wallets.filter(function (w) {
                                  return !w.default;
                                }))).map(function (w) {
                                  return w.address;
                                })
                              }));

                            case 5:
                            case 'end':
                              return _context.stop();
                          }
                        }
                      }, _callee, _this);
                    }));

                    return function (_x4) {
                      return _ref4.apply(this, arguments);
                    };
                  }()).catch(function (err) {
                    return reject(err);
                  }));
                  if (scope !== 'wallets:read') {
                    promises.push(_fetch(API_ENDPOINT + '/user?access_token=' + result).then(function () {
                      var _ref6 = asyncToGenerator(_regeneratorRuntime.mark(function _callee2(_ref5) {
                        var success = _ref5.success,
                            user = objectWithoutProperties(_ref5, ['success']);
                        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                if (success) {
                                  _context2.next = 4;
                                  break;
                                }

                                reject(new SqlkError(data.message || 'Issue fetching user info, try again later'));
                                _context2.next = 5;
                                break;

                              case 4:
                                return _context2.abrupt('return', Promise.resolve({
                                  securitySettings: {
                                    has2fa: user.has_2fa,
                                    hasRecovery: user.has_recovery,
                                    emailVerified: user.email_verified
                                  },
                                  name: user.given_name + ' ' + user.family_name,
                                  email: user.email
                                }));

                              case 5:
                              case 'end':
                                return _context2.stop();
                            }
                          }
                        }, _callee2, _this);
                      }));

                      return function (_x5) {
                        return _ref6.apply(this, arguments);
                      };
                    }()).catch(function (err) {
                      return reject(err);
                    }));
                  }
                  Promise.all(promises).then(function (results) {
                    var result = {};
                    results.forEach(function (r) {
                      result = _extends({}, result, r);
                    });
                    resolve(result);
                  });
                }
              });

            case 3:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, _this);
    }));

    return function (_x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }());
};

var _signMsg = function () {
  var _ref8 = asyncToGenerator(_regeneratorRuntime.mark(function _callee4(_ref7) {
    var client_id = _ref7.client_id,
        message = _ref7.message,
        method = _ref7.method,
        account = _ref7.account;
    var url, params;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            url = APP_URL + '/msg?version=' + VERSION;
            params = {
              client_id: client_id,
              method: method,
              version: VERSION,
              account: account
            };

            if (method === 'eth_signTypedData') {
              params.params = message;
            } else if (method === 'eth_signTypedData_v3') {
              params.paramsV3 = message;
            } else {
              params.msg = message;
            }
            return _context4.abrupt('return', _popup({ url: url, params: params }).then(function (_ref9) {
              var error = _ref9.error,
                  result = _ref9.result;

              if (error) throw new SqlkError(error);
              return Promise.resolve(result);
            }));

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function _signMsg(_x6) {
    return _ref8.apply(this, arguments);
  };
}();

var _signTx = function () {
  var _ref11 = asyncToGenerator(_regeneratorRuntime.mark(function _callee5(_ref10) {
    var method = _ref10.method,
        client_id = _ref10.client_id,
        value = _ref10.value,
        to = _ref10.to,
        from = _ref10.from,
        gas = _ref10.gas,
        gasPrice = _ref10.gasPrice,
        nonce = _ref10.nonce,
        network = _ref10.network,
        description = _ref10.description,
        state = _ref10.state,
        data = _ref10.data;
    var url, params;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (to) {
              _context5.next = 2;
              break;
            }

            throw new SqlkError('You must provide a recipient `to` for the request');

          case 2:
            url = APP_URL + '/tx?widget=true&version=' + VERSION;
            params = {
              method: method,
              client_id: client_id,
              version: VERSION,
              widget: true,
              to: to,
              from: from,
              data: data,
              state: state,
              description: description
            };

            if (value) params.value = parseInt(value, 16);
            if (gas) params.gas = parseInt(gas, 16);
            if (gasPrice) params.gasPrice = parseInt(gasPrice, 16);
            if (nonce) params.nonce = parseInt(nonce, 16);

            if ((typeof network === 'undefined' ? 'undefined' : _typeof(network)) === 'object') {
              params.network = 'custom';
              params.rpc_url = network.url;
              if (network.chainId) params.chain_id = network.chainId;
            } else {
              params.network = network;
            }
            return _context5.abrupt('return', _popup({ url: url, params: params }).then(function (_ref12) {
              var error = _ref12.error,
                  result = _ref12.result;

              if (error) throw new SqlkError(error);
              return Promise.resolve(result);
            }));

          case 10:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function _signTx(_x7) {
    return _ref11.apply(this, arguments);
  };
}();

var Squarelink = function () {
  function Squarelink(client_id) {
    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mainnet';
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Squarelink);

    if (opts.useSync) {
      this.NETWORKS = _availableAsSync;
      this.useSync = true;
    } else {
      _loadNetworks.call(this);
    }
    this.client_id = client_id;
    this.network = network;
    this.scope = opts.scope || [];
    this.stopped = true;
  }

  createClass(Squarelink, [{
    key: 'getProvider',
    value: function () {
      var _ref = asyncToGenerator(_regeneratorRuntime.mark(function _callee(cb) {
        var client_id, network, scope;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;

                if (!this.useSync) {
                  _context.next = 3;
                  break;
                }

                throw new SqlkError('Please set `useSync` to false');

              case 3:
                _context.next = 5;
                return _waitForNetworks.call(this);

              case 5:
                client_id = this.client_id, network = this.network, scope = this.scope;

                _validateSecureOrigin();
                _validateParams.call(this, { client_id: client_id, network: network, scope: scope });
                this.changeNetwork(network);

                if (!cb) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt('return', cb(this.engine, null));

              case 11:
                return _context.abrupt('return', Promise.resolve(this.engine));

              case 14:
                _context.prev = 14;
                _context.t0 = _context['catch'](0);

                if (!cb) {
                  _context.next = 18;
                  break;
                }

                return _context.abrupt('return', cb(null, _context.t0));

              case 18:
                return _context.abrupt('return', Promise.reject(_context.t0));

              case 19:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 14]]);
      }));

      function getProvider(_x3) {
        return _ref.apply(this, arguments);
      }

      return getProvider;
    }()
  }, {
    key: 'getProviderSync',
    value: function getProviderSync() {
      console.warn('[Squarelink]: getProviderSync is not recommended as we cannot ensure uptime of RPC providers.');
      if (!this.useSync) throw new SqlkError('Please set `useSync` to true');
      var client_id = this.client_id,
          network = this.network,
          scope = this.scope;

      _validateSecureOrigin();
      _validateParams.call(this, { client_id: client_id, network: network, scope: scope });
      this.changeNetwork(network);
      return this.engine;
    }
  }, {
    key: 'changeNetwork',
    value: function changeNetwork(network) {
      var client_id = this.client_id;

      _validateParams.call(this, { client_id: client_id, network: network });
      this.network = network;
      this.net_version = _getNetVersion.call(this, network);

      var _getRPCInfo$call = _getRPCInfo.call(this, network),
          rpcUrl = _getRPCInfo$call.rpcUrl,
          connectionType = _getRPCInfo$call.connectionType,
          skipCache = _getRPCInfo$call.skipCache;

      this.connectionType = connectionType;
      this.rpcUrl = rpcUrl;
      this._initEngine(skipCache);
    }
  }, {
    key: '_initEngine',
    value: function _initEngine(skipCache) {
      var _this = this;

      var self = this;
      this.accounts = [];
      var engine = new ProviderEngine({
        setSkipCacheFlag: skipCache
      });
      engine.isSquarelink = true;
      engine.isConnected = function () {
        return true;
      };
      engine.send = function (payload, callback) {
        if (typeof payload === 'string') {
          return new Promise(function (resolve, reject) {
            engine.sendAsync({
              jsonrpc: '2.0',
              id: 42,
              method: payload,
              params: callback || []
            }, function (error, response) {
              if (error) {
                reject(error);
              } else {
                resolve(response.result);
              }
            });
          });
        }

        if (callback) {
          engine.sendAsync(payload, callback);
          return;
        }

        var result = null;
        switch (payload.method) {
          case 'eth_accounts':
            result = _this.accounts.length ? _this.accounts : [];
            break;

          case 'eth_coinbase':
            result = _this.accounts.length ? _this.accounts[0] : undefined;
            break;

          case 'net_version':
            result = _this.net_version || null;
            break;

          default:
            var message = 'The Squarelink Web3 object does not support synchronous methods like ' + payload.method + ' without a callback parameter.';
            throw new SqlkError(message);
        }
        return {
          id: payload.id,
          jsonrpc: payload.jsonrpc,
          result: result
        };
      };

      var fixtureSubprovider = new FixtureSubprovider({
        web3_clientVersion: 'Squarelink/v' + VERSION + '/javascript',
        net_listening: true,
        eth_hashrate: '0x00',
        eth_mining: false,
        eth_syncing: true
      });
      var nonceSubprovider = new NonceSubprovider();
      var cacheSubprovider = new CacheSubprovider();

      var walletSubprovider = new HookedWalletSubprovider({
        getAccounts: function () {
          var _ref2 = asyncToGenerator(_regeneratorRuntime.mark(function _callee2(cb) {
            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (self.accounts.length) cb(null, self.accounts);else {
                      _getAccounts(self.client_id, { scope: self.scope }).then(function (_ref3) {
                        var email = _ref3.email,
                            name = _ref3.name,
                            securitySettings = _ref3.securitySettings,
                            accounts = _ref3.accounts;

                        self.accounts = accounts;
                        self.defaultEmail = email;
                        self.defaultName = name;
                        self.defaultSecuritySettings = securitySettings;
                        cb(null, accounts);
                      }).catch(function (err) {
                        return cb(err, null);
                      });
                    }

                  case 1:
                  case 'end':
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function getAccounts(_x4) {
            return _ref2.apply(this, arguments);
          }

          return getAccounts;
        }(),
        getCoinbase: function () {
          var _ref4 = asyncToGenerator(_regeneratorRuntime.mark(function _callee3(cb) {
            return _regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    this.getAccounts().then(function (accounts) {
                      return cb(null, accounts[0]);
                    }).catch(function (err) {
                      return cb(err, null);
                    });

                  case 1:
                  case 'end':
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function getCoinbase(_x5) {
            return _ref4.apply(this, arguments);
          }

          return getCoinbase;
        }(),
        signTransaction: function () {
          var _ref5 = asyncToGenerator(_regeneratorRuntime.mark(function _callee4(payload, cb) {
            var from;
            return _regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    from = payload.from;

                    if (typeof from === 'number') from = self.accounts[from];
                    _signTx(_extends({}, payload, {
                      from: from,
                      method: 'eth_signTransaction',
                      client_id: self.client_id,
                      network: self.network
                    })).then(function (res) {
                      cb(null, res);
                    }).catch(function (err) {
                      cb(err, null);
                    });

                  case 3:
                  case 'end':
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function signTransaction(_x6, _x7) {
            return _ref5.apply(this, arguments);
          }

          return signTransaction;
        }(),
        signMessage: function () {
          var _ref6 = asyncToGenerator(_regeneratorRuntime.mark(function _callee5(payload, cb) {
            var from, data, method;
            return _regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    from = payload.from, data = payload.data, method = payload.method;

                    if (typeof from === 'number') from = self.accounts[from];
                    _signMsg({
                      client_id: self.client_id,
                      method: method || 'eth_sign',
                      message: data,
                      account: from
                    }).then(function (res) {
                      return cb(null, res);
                    }).catch(function (err) {
                      return cb(err, null);
                    });

                  case 3:
                  case 'end':
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function signMessage(_x8, _x9) {
            return _ref6.apply(this, arguments);
          }

          return signMessage;
        }(),
        signPersonalMessage: function () {
          var _ref7 = asyncToGenerator(_regeneratorRuntime.mark(function _callee6(payload, cb) {
            return _regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.signMessage(_extends({}, payload, { method: 'eth_personalSign' }), function (err, res) {
                      if (err) cb(err, null);else cb(null, res);
                    });

                  case 1:
                  case 'end':
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function signPersonalMessage(_x10, _x11) {
            return _ref7.apply(this, arguments);
          }

          return signPersonalMessage;
        }(),
        signTypedMessage: function () {
          var _ref8 = asyncToGenerator(_regeneratorRuntime.mark(function _callee7(payload, cb) {
            return _regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    this.signMessage(_extends({}, payload, { method: 'eth_signTypedData' }), function (err, res) {
                      if (err) cb(err, null);else cb(null, res);
                    });

                  case 1:
                  case 'end':
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function signTypedMessage(_x12, _x13) {
            return _ref8.apply(this, arguments);
          }

          return signTypedMessage;
        }(),
        signTypedMessageV3: function () {
          var _ref9 = asyncToGenerator(_regeneratorRuntime.mark(function _callee8(payload, cb) {
            return _regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    this.signMessage(_extends({}, payload, { method: 'eth_signTypedData_v3' }), function (err, res) {
                      if (err) cb(err, null);else cb(null, res);
                    });

                  case 1:
                  case 'end':
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function signTypedMessageV3(_x14, _x15) {
            return _ref9.apply(this, arguments);
          }

          return signTypedMessageV3;
        }()
      });

      engine.addProvider(fixtureSubprovider);
      engine.addProvider(nonceSubprovider);
      engine.addProvider(cacheSubprovider);
      engine.addProvider(walletSubprovider, 0);

      var rpcUrl = this.rpcUrl,
          connectionType = this.connectionType;

      if (connectionType === 'http') {
        engine.addProvider(new RpcSubprovider({ rpcUrl: rpcUrl }));
        engine.addProvider(new SubscriptionSubprovider(), 2);
        engine.addProvider(new FilterSubprovider(), 1);
      } else if (connectionType === 'ws') {
        engine.addProvider(new WebSocketSubprovider({ rpcUrl: rpcUrl }));
      }

      engine.on('error', function (err) {
        console.error(err.stack);
      });

      engine.enable = function () {
        return new Promise(function (resolve, reject) {
          engine.sendAsync({ method: 'eth_accounts' }, function (error, response) {
            if (error) {
              reject(error);
            } else {
              resolve(response.result);
            }
          });
        });
      };

      engine.start();

      this.engine = engine;
    }
  }, {
    key: 'getEmail',
    value: function getEmail() {
      if (!this.scope.includes('user') && !this.scope.includes('user:email')) throw new SqlkError('Please enable the user:email scope when initializing Squarelink');
      return this.defaultEmail;
    }
  }, {
    key: 'getName',
    value: function getName() {
      if (!this.scope.includes('user') && !this.scope.includes('user:name')) throw new SqlkError('Please enable the user:name scope when initializing Squarelink');
      return this.defaultName;
    }
  }, {
    key: 'getSecuritySettings',
    value: function getSecuritySettings() {
      if (!this.scope.includes('user') && !this.scope.includes('user:security')) throw new SqlkError('Please enable the user:security scope when initializing Squarelink');
      return this.defaultSecuritySettings;
    }
  }]);
  return Squarelink;
}();

export default Squarelink;
